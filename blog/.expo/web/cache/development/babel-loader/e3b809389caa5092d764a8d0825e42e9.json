{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport createDataContext from \"./createDataContext\";\nimport jsonServer from \"../api/jsonServer\";\n\nvar blogReducer = function blogReducer(state, action) {\n  switch (action.type) {\n    case \"get_blogposts\":\n      return action.payload;\n\n    case \"edit_blogpost\":\n      return state.map(function (blogPost) {\n        return blogPost.id === action.payload.id ? action.payload : blogPost;\n      });\n\n    case \"delete_blogpost\":\n      return state.filter(function (blogPost) {\n        return blogPost.id !== action.payload;\n      });\n\n    case \"add_blogpost\":\n      return [].concat(_toConsumableArray(state), [{\n        id: Math.floor(Math.random() * 99999),\n        title: action.payload.title,\n        content: action.payload.content\n      }]);\n\n    default:\n      return state;\n  }\n};\n\nvar getBlogPosts = function getBlogPosts(dispatch) {\n  return function _callee() {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(jsonServer.get(\"/blogposts\"));\n\n          case 2:\n            response = _context.sent;\n            dispatch({\n              type: \"get_blogposts\",\n              payload: response.data\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar addBlogPost = function addBlogPost(dispatch) {\n  return function _callee2(title, content, callback) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(jsonServer.post(\"/blogposts\", {\n              title: title,\n              content: content\n            }));\n\n          case 2:\n            if (callback) {\n              callback();\n            }\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar deleteBlogPost = function deleteBlogPost(dispatch) {\n  return function _callee3(id) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: \"delete_blogpost\",\n              payload: id\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar editBlogPost = function editBlogPost(dispatch) {\n  return function (id, title, content) {\n    dispatch({\n      type: \"edit_blogpost\",\n      payload: {\n        id: id,\n        title: title,\n        content: content\n      }\n    });\n\n    if (callback) {\n      callback();\n    }\n  };\n};\n\nvar _createDataContext = createDataContext(blogReducer, {\n  addBlogPost: addBlogPost,\n  deleteBlogPost: deleteBlogPost,\n  editBlogPost: editBlogPost,\n  getBlogPosts: getBlogPosts\n}, []),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["C:/Users/user/react-native-course/blog/src/context/BlogContext.js"],"names":["createDataContext","jsonServer","blogReducer","state","action","type","payload","map","blogPost","id","filter","Math","floor","random","title","content","getBlogPosts","dispatch","get","response","data","addBlogPost","callback","post","deleteBlogPost","editBlogPost","Context","Provider"],"mappings":"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","sourcesContent":["import createDataContext from \"./createDataContext\";\r\nimport jsonServer from \"../api/jsonServer\";\r\n\r\nconst blogReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"get_blogposts\":\r\n      return action.payload;\r\n    case \"edit_blogpost\":\r\n      return state.map((blogPost) => {\r\n        return blogPost.id === action.payload.id ? action.payload : blogPost;\r\n      });\r\n    case \"delete_blogpost\":\r\n      return state.filter((blogPost) => blogPost.id !== action.payload);\r\n    case \"add_blogpost\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: Math.floor(Math.random() * 99999),\r\n          title: action.payload.title,\r\n          content: action.payload.content,\r\n        },\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getBlogPosts = (dispatch) => {\r\n  return async () => {\r\n    const response = await jsonServer.get(\"/blogposts\");\r\n\r\n    dispatch({ type: \"get_blogposts\", payload: response.data });\r\n  };\r\n};\r\n\r\nconst addBlogPost = (dispatch) => {\r\n  return async (title, content, callback) => {\r\n    await jsonServer.post(\"/blogposts\", { title, content });\r\n    // dispatch({ type: \"add_blogpost\", payload: { title, content } });\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  };\r\n};\r\nconst deleteBlogPost = (dispatch) => {\r\n  return async (id) => {\r\n    dispatch({ type: \"delete_blogpost\", payload: id });\r\n  };\r\n};\r\nconst editBlogPost = (dispatch) => {\r\n  return (id, title, content) => {\r\n    dispatch({\r\n      type: \"edit_blogpost\",\r\n      payload: { id, title, content },\r\n    });\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  };\r\n};\r\n\r\nexport const { Context, Provider } = createDataContext(\r\n  blogReducer,\r\n  { addBlogPost, deleteBlogPost, editBlogPost, getBlogPosts },\r\n  []\r\n);\r\n"]},"metadata":{},"sourceType":"module"}